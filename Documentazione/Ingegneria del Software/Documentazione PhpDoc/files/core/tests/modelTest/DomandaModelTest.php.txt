<?php

/**
 * La classe effettua il test di tutti i metodi della classe DomandaModel.php
 * @author Alina Korniychuk
 * @version 1.0
 * @since 23/11/15
 */


class DomandaModelTest extends PHPUnit_Framework_TestCase
{


    const TESTODOM = "Nuova domanda";
    const ARGOMENTOID = 9;
    const PUNTEGGIOMAX = 10;
    const PERCENTUALESCELTA = 10;
    const PUNTEGGIOMAX2 = 15;
    const PERCENTUALESCELTA2 = 20;
    const PUNTEGGIOCORRETTA = 5;
    const PUNTEGGIOERRATA = -1;
    const PERCRISPCORRETTA = 10;
    const PUNTEGGIOCORRETTA2 = 7;
    const PUNTEGGIOERRATA2 = 0;
    const IDTEST = 1;
    const IDDOMAPERTA = 1;
    const PUNTALT = 40;
    const PUNTALTCORRETTA = 10;
    const PUNTALTERRATA = -10;
    const NUMERORISPOSTE1=0;
    const NUMERORISPOSTE2=1;
    const CORSOID=18;

    public function testDomandaAperta()
    {

        $model = new DomandaModel();
        //crea una domanda aperta
        $idDom = $model->createDomandaAperta(new DomandaAperta(self::ARGOMENTOID, self::TESTODOM, self::PUNTEGGIOMAX, self::PERCENTUALESCELTA, self::PERCENTUALESCELTA));

        //legge la domanda aperta creata dal db
        $domA = $model->readDomandaAperta($idDom);

        //confronta le due domande
        $this->assertEquals(self::ARGOMENTOID, $domA->getArgomentoId());
        $this->assertEquals(self::TESTODOM, $domA->getTesto());
        $this->assertEquals(self::PUNTEGGIOMAX, $domA->getPunteggioMax());
        $this->assertEquals(self::PERCENTUALESCELTA, $domA->getPercentualeSceltaEse());
        $this->assertEquals(self::PERCENTUALESCELTA, $domA->getPercentualeSceltaVal());

        //modifico la domanda aperta in questione
        $model->updateDomandaAperta($idDom,(new DomandaAperta(self::ARGOMENTOID,self::TESTODOM,self::PUNTEGGIOMAX2, self::PERCENTUALESCELTA2, self::PERCENTUALESCELTA2 )));

        //leggo la domanda aperta modificata dal db
        $domAM = $model->readDomandaAperta($idDom);

        //verifico la modifica
        $this->assertEquals(self::ARGOMENTOID, $domAM->getArgomentoId());
        $this->assertEquals(self::TESTODOM, $domAM->getTesto());
        $this->assertEquals(self::PUNTEGGIOMAX2, $domAM->getPunteggioMax());
        $this->assertEquals(self::PERCENTUALESCELTA2, $domAM->getPercentualeSceltaEse());
        $this->assertEquals(self::PERCENTUALESCELTA2, $domAM->getPercentualeSceltaVal());


        //leggo tutte le domande aperte dell argomento che ha l'ID 9
        $allDomByArg = $model->getAllDomandaApertaByArgomento(self::ARGOMENTOID);
        print_r($allDomByArg);

        //associo una domanda aperta al test
        $model ->associaDomandaApertaTest($idDom, self::IDTEST, 3);

        //modifico il punteggio della domanda aperta per il test
        $model->modificaDomandaApertaTest($idDom, self::IDTEST, self::PUNTALT);

        //leggo il punteggio max alternativo e lo confronto
        $punt = $model->readPunteggioMaxAlternativo($idDom, self::IDTEST);
        $this->assertEquals(self::PUNTALT, $punt);

        //verifico se la domanda associata fa parte del test e se ha cambiato il punteggio
        $allDomByTest = $model->getAllDomandeAperteByTest(self::IDTEST);
        print("Stampo la lista di tutte le domande aperte di un test");
        print_r($allDomByTest);

        //dissocio una domanda aperta al test
        $model ->dissociaDomandaApertaTest($idDom, self::IDTEST);
        //verifico che la domanda non fa parte piu del test
        $allDomByTest2 = $model->getAllDomandeAperteByTest(self::IDTEST);
        print("Stampo la lista di tutte le domande aperte di un test per la seconda volta");
        print_r($allDomByTest2);

        //cancello la domanda aperta
        $model->deleteDomandaAperta($idDom);

        //verifico la cancellazione
        $allDom = $model->getAllDomandaAperta();
        print("Stampo tutte le domande aperte");
        print_r($allDom);

        //stampo tutte le domande aperte di un corso
        $allDomMByCorso = $model->getAllDomandaApertaByCorso(self::CORSOID);
        print("Stampo la lista di tutte le domande aperte di un corso\n");
        print_r($allDomMByCorso);


    }

    public function testDomandaMultipla(){

        $model = new DomandaModel();
        //crea una domanda multipla
        $idDom = $model->createDomandaMultipla(new DomandaMultipla(self::ARGOMENTOID, self::TESTODOM, self::PUNTEGGIOCORRETTA, self::PUNTEGGIOERRATA, self::PERCENTUALESCELTA, self::PERCRISPCORRETTA, self::PERCENTUALESCELTA, self::PERCRISPCORRETTA, self::NUMERORISPOSTE1, self::NUMERORISPOSTE1));

        //legge la domanda multipla creata
        $domA = $model->readDomandaMultipla($idDom);

        //confronta le due domande
        $this->assertEquals(self::ARGOMENTOID, $domA->getArgomentoId());
        $this->assertEquals(self::TESTODOM, $domA->getTesto());
        $this->assertEquals(self::PUNTEGGIOCORRETTA, $domA->getPunteggioCorretta());
        $this->assertEquals(self::PUNTEGGIOERRATA, $domA->getPunteggioErrata());
        $this->assertEquals(self::PERCENTUALESCELTA, $domA->getPercentualeSceltaEse());
        $this->assertEquals(self::PERCRISPCORRETTA, $domA->getPercentualeRispostaCorrettaEse());
        $this->assertEquals(self::PERCENTUALESCELTA, $domA->getPercentualeSceltaVal());
        $this->assertEquals(self::PERCRISPCORRETTA, $domA->getPercentualeRispostaCorrettaVal());
        $this->assertEquals(self::NUMERORISPOSTE1, $domA->getNumeroRisposteEsercitative());
        $this->assertEquals(self::NUMERORISPOSTE1, $domA->getNumeroRisposteValutative());

        //modifico la domanda aperta in questione
        $model->updateDomandaMultipla($idDom, (new DomandaMultipla(self::ARGOMENTOID, self::TESTODOM, self::PUNTEGGIOCORRETTA2, self::PUNTEGGIOERRATA2, self::PERCENTUALESCELTA, self::PERCRISPCORRETTA, self::PERCENTUALESCELTA, self::PERCRISPCORRETTA, self::NUMERORISPOSTE2, self::NUMERORISPOSTE2)));

        //leggo la domanda multipla modificata
        $domA = $model->readDomandaMultipla($idDom);

        //verifico la modifica
        $this->assertEquals(self::ARGOMENTOID, $domA->getArgomentoId());
        $this->assertEquals(self::TESTODOM, $domA->getTesto());
        $this->assertEquals(self::PUNTEGGIOCORRETTA2, $domA->getPunteggioCorretta());
        $this->assertEquals(self::PUNTEGGIOERRATA2, $domA->getPunteggioErrata());
        $this->assertEquals(self::PERCENTUALESCELTA, $domA->getPercentualeSceltaEse());
        $this->assertEquals(self::PERCRISPCORRETTA, $domA->getPercentualeRispostaCorrettaEse());
        $this->assertEquals(self::PERCENTUALESCELTA, $domA->getPercentualeSceltaVal());
        $this->assertEquals(self::PERCRISPCORRETTA, $domA->getPercentualeRispostaCorrettaVal());
        $this->assertEquals(self::NUMERORISPOSTE2, $domA->getNumeroRisposteEsercitative());
        $this->assertEquals(self::NUMERORISPOSTE2, $domA->getNumeroRisposteValutative());

        //associo una domanda multipla al test
        $model ->associaDomandaMultiplaTest($idDom, self::IDTEST, 3, -1);

        //modifico il punteggio della domanda multipla per il test
        $model->modificaDomandaMultiplaTest($idDom, self::IDTEST, self::PUNTALTCORRETTA,self::PUNTALTERRATA);

        //leggo il punteggio alternativo corretto e lo confronto
        $punt = $model->readPunteggioCorrettaAlternativo($idDom, self::IDTEST);
        $this->assertEquals(self::PUNTALTCORRETTA, $punt);

        //leggo il punteggio alternativo errato e lo confronto
        $punt = $model->readPunteggioErrataAlternativo($idDom, self::IDTEST);
        $this->assertEquals(self::PUNTALTERRATA, $punt);

        //verifico se la domanda associata fa parte del test
        $allDomByTest = $model->getAllDomandeMultipleByTest(self::IDTEST);
        print("Stampo la lista di tutte le domande multipla di un test e verifico la presenza della domanda\n");
        print_r($allDomByTest);

        //dissocio una domanda multipla al test
        $model ->dissociaDomandaMultiplaTest($idDom, self::IDTEST);

        //verifico che la domanda non fa parte piu del test
        //stampo una lista di domande multiple di un test
        $allDomMByTest = $model->getAllDomandeMultipleByTest(self::IDTEST);
        print("Stampo la lista di tutte le domande multiple di un test e verifico l'assenza\n");
        print_r($allDomMByTest);

        //cancello la domanda multipla
        $model->deleteDomandaMultipla($idDom);

        //verifico la cancellazione
        $allDom = $model->getAllDomandaMultipla();
        print_r($allDom);

        //leggo le domande multiple dell argomento con l'ID 7
        $allDomMByArg = $model->getAllDomandaMultiplaByArgomento(7);
        print_r($allDomMByArg);

        //stampo tutte le domande multiple di un corso
        $allDomMByCorso = $model->getAllDomandaMultiplaByCorso(self::CORSOID);
        print("Stampo la lista di tutte le domande multiple di un corso\n");
        print_r($allDomMByCorso);



    }
}
